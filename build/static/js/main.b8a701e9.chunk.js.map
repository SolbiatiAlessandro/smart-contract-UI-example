{"version":3,"sources":["util/interact.js","HelloWorld.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","createAlchemyWeb3","console","log","process","web3","contractABI","contractAddress","helloWorldContract","eth","Contract","loadCurrentMessage","a","methods","message","call","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","getCurrentWalletConnected","updateMessage","trim","transactionParameters","to","from","data","update","encodeABI","params","txHash","target","href","HelloWorld","useState","walletAddress","setWallet","setStatus","setMessage","newMessage","setNewMessage","useEffect","events","UpdatedMessages","error","returnValues","connectWalletPressed","connectWalletResponse","onUpdatePressed","updateMessageResponse","id","onClick","length","String","substring","style","paddingTop","type","placeholder","onChange","e","value","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8a701e9.chunk.js","sourcesContent":["require(\"dotenv\").config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconsole.log(process.env);\nconst web3 = createAlchemyWeb3(alchemyKey);\n\n\nconst contractABI = require(\"../contract-abi.json\");\nexport const contractAddress = \"0xE77328ee4B34f3cd7FaF39dD5dEc3537869e0BB9\"\nexport const helloWorldContract = new web3.eth.Contract(\n\tcontractABI,\n\tcontractAddress\n);\n\n\nexport const loadCurrentMessage = async () => { \n\tconst message = await helloWorldContract.methods.message().call();\n\treturn message;\n};\n\nexport const connectWallet = async () => {\n\tif (window.ethereum){\n\t\ttry{\n\t\t\tconst addressArray = await window.ethereum.request({\n\t\t\t\tmethod: \"eth_requestAccounts\"\n\t\t\t});\n\t\t\tconst obj = {\n\t\t\t\tstatus: \"write message in text-field\",\n\t\t\t\taddress: addressArray[0],\n\t\t\t}\n\t\t\treturn obj;\n\t\t} catch(err) {\n\t\t\tconst obj = {\n\t\t\t\tstatus: err.message,\n\t\t\t\taddress: \"\"\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\t\tstatus: \"metamask not connected\",\n\t\t\t\taddress: \"\"\n\t\t}\n\t}\n};\n\nexport const getCurrentWalletConnected = async () => {\n\tif (window.ethereum){\n\t\ttry{\n\t\t\tconst addressArray = await window.ethereum.request({\n\t\t\t\tmethod: \"eth_accounts\"\n\t\t\t});\n\t\t\tconst obj = {\n\t\t\t\tstatus: \"write message in text-field\",\n\t\t\t\taddress: addressArray[0],\n\t\t\t}\n\t\t\treturn obj;\n\t\t} catch(err) {\n\t\t\tconst obj = {\n\t\t\t\tstatus: err.message,\n\t\t\t\taddress: \"\"\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\t\tstatus: \"metamask not connected\",\n\t\t\t\taddress: \"\"\n\t\t}\n\t}\n  \n};\n\nexport const updateMessage = async (address, message) => {\n\tif (!window.ethereum || address === null) {\n\t\t\treturn {\n      status:\n        \"üí° Connect your MetaMask wallet to update the message on the blockchain.\",\n    }\n  }\n\tif (message.trim() === \"\") {\n    return {\n      status: \"‚ùå Your message cannot be an empty string.\",\n    }\n  }\n\n\tconst transactionParameters = {\n\t\tto: contractAddress,\n\t\tfrom: address,\n\t\tdata: helloWorldContract.methods.update(message).encodeABI()\n\t}\n\n\ttry{\n\t\tconst txHash = await window.ethereum.request({\n\t\t\tmethod: \"eth_sendTransaction\", \n\t\t\tparams: [transactionParameters]\n\t\t});\n\t\treturn {\n\t\t\tstatus: (\n      <span>\n        ‚úÖ{\" \"}\n        <a target=\"_blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\n          {`https://ropsten.etherscan.io/tx/${txHash}`}\n        </a>\n        <br />\n        <p>Waiting for transaction to be mined</p>\n      </span>\n    ),\n\t\t}\n\n  } catch (err) {\n\t\treturn { status: err.message };\n\t}\n  \n};\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n\tcontractAddress\n} from \"./util/interact.js\";\n\n\nconst HelloWorld = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n\t\tconst message = await loadCurrentMessage();\n\t\tsetMessage(message);\n\t\taddSmartContractListener();\n\n\t\tconst { address, status } = await getCurrentWalletConnected();\n\t\tsetWallet(address);\n\t\tsetStatus(status);\n  }, []);\n\n  function addSmartContractListener() { \n\t\thelloWorldContract.events.UpdatedMessages({}, (error, data) => {\n\t\t\tif (error) {\n\t\t\t\tsetStatus(error.message);\n\t\t\t} else {\n\t\t\t\tsetMessage(data.returnValues[1]);\n\t\t\t\tsetNewMessage(\"\");\n\t\t\t\tsetStatus(\"Message was updated\");\n\t\t\t}\n\t\t});\n  }\n\n\t// TODO: not handling user logout or changing account (addWalletListener)\n\n  const connectWalletPressed = async () => { \n\t\tconst connectWalletResponse = await connectWallet();\n\t\tconsole.log(connectWalletResponse);\n\t\tsetStatus(connectWalletResponse.status);\n\t\tsetWallet(connectWalletResponse.address);\n  };\n\n  const onUpdatePressed = async () => { \n\t\tconst updateMessageResponse = await updateMessage(walletAddress, newMessage);\n\t\tsetStatus(updateMessageResponse.status);\n  };\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n\t\t  <h2>What is this?</h2>\n\t\t\t<p>This is a UI to edit the smart contract {contractAddress} </p>\n\t\t  <p>Click on \"connect wallet\" to link your metamask (your ethereum account with which you sign transaction and you pay gas fees). The UI will call the smart contracts methods for you, for instance <i>HelloWorldContract.update(message)</i> using the web3.js APIs</p>\n\t\t<a href=\"https://ropsten.etherscan.io/address/0xE77328ee4B34f3cd7FaF39dD5dEc3537869e0BB9#code\">View smart contract on etherscan at https://ropsten.etherscan.io/address/0xE77328ee4B34f3cd7FaF39dD5dEc3537869e0BB9#code</a>\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: \"50px\" }}>Content of <i>string public message</i> on the smart contract:</h2>\n      <p>{message}</p>\n\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Update the message in your smart contract.\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id=\"status\">{status}</p>\n\n        <button id=\"publish\" onClick={onUpdatePressed}>\n          Call <i>function update(string memory newMessage)</i> on the smart contract\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default HelloWorld;\n","import HelloWorld from './HelloWorld'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <HelloWorld></HelloWorld>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}